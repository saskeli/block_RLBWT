#include <cstdint>
#include <utility>
#include <endian.h>

namespace bbwt {
template <class dtype>
class custom_alphabet {
   private:
    inline static const uint8_t c_map[] = {
          0, 9, 8, 5, 7, 4, 0, 1, 3, 202, 227, 0, 17, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 10,
          236, 115, 225, 205, 199, 183, 159, 181, 200, 203, 180, 144, 211, 219, 217, 208,
          191, 207, 197, 174, 185, 175, 169, 166, 165, 171, 213, 186, 152, 188, 173, 131,
          164, 192, 158, 182, 170, 206, 176, 167, 157, 201, 124, 142, 184, 172, 194, 193,
          177, 53, 187, 190, 196, 168, 141, 138, 156, 145, 130, 163, 212, 162, 85, 214,
          161, 229, 210, 226, 224, 235, 221, 215, 218, 231, 151, 198, 223, 222, 232, 228,
          216, 146, 230, 233, 234, 220, 204, 195, 189, 209, 179, 154, 148, 155, 160, 11,
          111, 92, 100, 48, 70, 25, 32, 75, 41, 33, 24, 49, 62, 59, 14, 78,
          37, 43, 15, 16, 34, 40, 50, 29, 20, 44, 67, 36, 42, 19, 30, 65,
          58, 110, 22, 27, 150, 134, 28, 51, 47, 56, 38, 66, 35, 76, 52, 55,
          139, 113, 95, 90, 108, 121, 84, 102, 125, 106, 117, 137, 119, 128, 123, 112,
          103, 127, 89, 147, 133, 129, 72, 98, 60, 114, 77, 86, 97, 82, 116, 135,
          178, 153, 79, 96, 104, 74, 21, 93, 63, 83, 61, 13, 45, 46, 88, 64,
          18, 149, 57, 87, 120, 140, 126, 132, 109, 143, 99, 91, 105, 136, 26, 122,
          71, 101, 94, 118, 107, 81, 80, 31, 69, 39, 73, 12, 54, 68, 23, 2};
    inline static const uint8_t r_map[] = {
        0, 7, 255, 8, 5, 3, 27, 4, 2, 1, 31, 127, 251, 219, 142, 146,
        147, 12, 224, 157, 152, 214, 162, 254, 138, 133, 238, 163, 166, 151, 158, 247,
        134, 137, 148, 172, 155, 144, 170, 249, 149, 136, 156, 145, 153, 220, 221, 168,
        131, 139, 150, 167, 174, 81, 252, 175, 169, 226, 160, 141, 200, 218, 140, 216,
        223, 159, 171, 154, 253, 248, 132, 240, 198, 250, 213, 135, 173, 202, 143, 210,
        246, 245, 205, 217, 182, 94, 203, 227, 222, 194, 179, 235, 129, 215, 242, 178,
        211, 204, 199, 234, 130, 241, 183, 192, 212, 236, 185, 244, 180, 232, 161, 128,
        191, 177, 201, 33, 206, 186, 243, 188, 228, 181, 239, 190, 74, 184, 230, 193,
        189, 197, 90, 63, 231, 196, 165, 207, 237, 187, 87, 176, 229, 86, 75, 233,
        43, 89, 113, 195, 124, 225, 164, 106, 60, 209, 123, 125, 88, 72, 66, 38,
        126, 96, 93, 91, 64, 56, 55, 71, 85, 54, 68, 57, 77, 62, 51, 53,
        70, 80, 208, 122, 42, 39, 67, 37, 76, 52, 59, 82, 61, 120, 83, 48,
        65, 79, 78, 119, 84, 50, 107, 36, 40, 73, 9, 41, 118, 35, 69, 49,
        47, 121, 98, 44, 92, 58, 95, 103, 112, 46, 104, 45, 117, 102, 109, 108,
        100, 34, 99, 10, 111, 97, 114, 105, 110, 115, 116, 101, 32, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    typedef std::pair<uint64_t, std::pair<uint32_t, uint32_t>> L;
    typedef std::pair<uint32_t, std::pair<uint16_t, uint16_t>> S;

    inline static const L L_map[] = {
        {1, {0, 63}},
        {3, {0, 61}},
        {31, {0, 56}},
        {31, {0, 51}},
        {31, {0, 46}},
        {63, {0, 40}},
        {63, {0, 34}},
        {63, {0, 28}},
        {63, {0, 22}},
        {255, {0, 14}},
        {2047, {0, 3}},
        {2047, {2, 8}},
        {4095, {3, 4}},
        {4095, {5, 8}},
        {8191, {6, 3}},
        {8191, {8, 6}},
        {8191, {9, 1}},
        {8191, {11, 4}},
        {8191, {13, 7}},
        {8191, {14, 2}},
        {16383, {16, 4}},
        {16383, {18, 6}},
        {16383, {20, 8}},
        {16383, {21, 2}},
        {16383, {23, 4}},
        {16383, {25, 6}},
        {16383, {27, 8}},
        {16383, {28, 2}},
        {16383, {30, 4}},
        {16383, {32, 6}},
        {16383, {34, 8}},
        {16383, {35, 2}},
        {16383, {37, 4}},
        {16383, {39, 6}},
        {16383, {41, 8}},
        {16383, {42, 2}},
        {16383, {44, 4}},
        {16383, {46, 6}},
        {16383, {48, 8}},
        {16383, {49, 2}},
        {32767, {51, 3}},
        {32767, {53, 4}},
        {32767, {55, 5}},
        {32767, {57, 6}},
        {32767, {59, 7}},
        {32767, {61, 8}},
        {32767, {62, 1}},
        {32767, {64, 2}},
        {32767, {66, 3}},
        {32767, {68, 4}},
        {32767, {70, 5}},
        {32767, {72, 6}},
        {32767, {74, 7}},
        {32767, {76, 8}},
        {32767, {77, 1}},
        {32767, {79, 2}},
        {32767, {81, 3}},
        {32767, {83, 4}},
        {32767, {85, 5}},
        {32767, {87, 6}},
        {32767, {89, 7}},
        {32767, {91, 8}},
        {32767, {92, 1}},
        {32767, {94, 2}},
        {32767, {96, 3}},
        {32767, {98, 4}},
        {32767, {100, 5}},
        {32767, {102, 6}},
        {32767, {104, 7}},
        {32767, {106, 8}},
        {32767, {107, 1}},
        {32767, {109, 2}},
        {32767, {111, 3}},
        {32767, {113, 4}},
        {32767, {115, 5}},
        {32767, {117, 6}},
        {32767, {119, 7}},
        {32767, {121, 8}},
        {32767, {122, 1}},
        {32767, {124, 2}},
        {32767, {126, 3}},
        {32767, {128, 4}},
        {32767, {130, 5}},
        {32767, {132, 6}},
        {32767, {134, 7}},
        {32767, {136, 8}},
        {32767, {137, 1}},
        {65535, {139, 1}},
        {65535, {141, 1}},
        {65535, {143, 1}},
        {65535, {145, 1}},
        {65535, {147, 1}},
        {65535, {149, 1}},
        {65535, {151, 1}},
        {65535, {153, 1}},
        {65535, {155, 1}},
        {65535, {157, 1}},
        {65535, {159, 1}},
        {65535, {161, 1}},
        {65535, {163, 1}},
        {65535, {165, 1}},
        {65535, {167, 1}},
        {65535, {169, 1}},
        {65535, {171, 1}},
        {65535, {173, 1}},
        {65535, {175, 1}},
        {65535, {177, 1}},
        {65535, {179, 1}},
        {65535, {181, 1}},
        {65535, {183, 1}},
        {65535, {185, 1}},
        {65535, {187, 1}},
        {65535, {189, 1}},
        {65535, {191, 1}},
        {65535, {193, 1}},
        {131071, {196, 8}},
        {131071, {198, 7}},
        {131071, {200, 6}},
        {131071, {202, 5}},
        {131071, {204, 4}},
        {131071, {206, 3}},
        {131071, {208, 2}},
        {131071, {210, 1}},
        {131071, {213, 8}},
        {131071, {215, 7}},
        {131071, {217, 6}},
        {131071, {219, 5}},
        {131071, {221, 4}},
        {131071, {223, 3}},
        {131071, {225, 2}},
        {131071, {227, 1}},
        {131071, {230, 8}},
        {131071, {232, 7}},
        {131071, {234, 6}},
        {131071, {236, 5}},
        {131071, {238, 4}},
        {131071, {240, 3}},
        {131071, {242, 2}},
        {131071, {244, 1}},
        {131071, {247, 8}},
        {262143, {249, 6}},
        {262143, {251, 4}},
        {262143, {253, 2}},
        {262143, {256, 8}},
        {262143, {258, 6}},
        {262143, {260, 4}},
        {262143, {262, 2}},
        {262143, {265, 8}},
        {262143, {267, 6}},
        {262143, {269, 4}},
        {262143, {271, 2}},
        {262143, {274, 8}},
        {262143, {276, 6}},
        {262143, {278, 4}},
        {262143, {280, 2}},
        {262143, {283, 8}},
        {262143, {285, 6}},
        {524287, {287, 3}},
        {524287, {290, 8}},
        {524287, {292, 5}},
        {524287, {294, 2}},
        {524287, {297, 7}},
        {524287, {299, 4}},
        {524287, {301, 1}},
        {524287, {304, 6}},
        {524287, {306, 3}},
        {524287, {309, 8}},
        {524287, {311, 5}},
        {524287, {313, 2}},
        {524287, {316, 7}},
        {524287, {318, 4}},
        {524287, {320, 1}},
        {524287, {323, 6}},
        {524287, {325, 3}},
        {524287, {328, 8}},
        {524287, {330, 5}},
        {524287, {332, 2}},
        {1048575, {335, 6}},
        {1048575, {337, 2}},
        {1048575, {340, 6}},
        {1048575, {342, 2}},
        {1048575, {345, 6}},
        {1048575, {347, 2}},
        {1048575, {350, 6}},
        {1048575, {352, 2}},
        {1048575, {355, 6}},
        {1048575, {357, 2}},
        {1048575, {360, 6}},
        {1048575, {362, 2}},
        {1048575, {365, 6}},
        {1048575, {367, 2}},
        {1048575, {370, 6}},
        {1048575, {372, 2}},
        {1048575, {375, 6}},
        {1048575, {377, 2}},
        {1048575, {380, 6}},
        {1048575, {382, 2}},
        {1048575, {385, 6}},
        {1048575, {387, 2}},
        {1048575, {390, 6}},
        {1048575, {392, 2}},
        {1048575, {395, 6}},
        {1048575, {397, 2}},
        {2097151, {400, 5}},
        {2097151, {403, 8}},
        {2097151, {405, 3}},
        {2097151, {408, 6}},
        {2097151, {410, 1}},
        {2097151, {413, 4}},
        {2097151, {416, 7}},
        {2097151, {418, 2}},
        {2097151, {421, 5}},
        {2097151, {424, 8}},
        {2097151, {426, 3}},
        {2097151, {429, 6}},
        {4194303, {432, 8}},
        {4194303, {434, 2}},
        {4194303, {437, 4}},
        {4194303, {440, 6}},
        {4194303, {443, 8}},
        {4194303, {445, 2}},
        {4194303, {448, 4}},
        {4194303, {451, 6}},
        {8388607, {454, 7}},
        {8388607, {457, 8}},
        {8388607, {459, 1}},
        {8388607, {462, 2}},
        {8388607, {465, 3}},
        {8388607, {468, 4}},
        {8388607, {471, 5}},
        {8388607, {474, 6}},
        {8388607, {477, 7}},
        {8388607, {480, 8}},
        {16777215, {483, 8}},
        {16777215, {486, 8}},
        {16777215, {489, 8}},
        {67108863, {492, 6}}};

    inline static const S S_map[] = {
        {1, {0, 31}},
        {3, {0, 29}},
        {31, {0, 24}},
        {31, {0, 19}},
        {31, {0, 14}},
        {63, {0, 8}},
        {63, {0, 2}},
        {63, {1, 4}},
        {63, {2, 6}},
        {255, {3, 6}},
        {2047, {4, 3}},
        {2047, {6, 8}},
        {4095, {7, 4}},
        {4095, {9, 8}},
        {8191, {10, 3}},
        {8191, {12, 6}},
        {8191, {13, 1}},
        {8191, {15, 4}},
        {8191, {17, 7}},
        {8191, {18, 2}},
        {16383, {20, 4}},
        {16383, {22, 6}},
        {16383, {24, 8}},
        {16383, {25, 2}},
        {16383, {27, 4}},
        {16383, {29, 6}},
        {16383, {31, 8}},
        {16383, {32, 2}},
        {16383, {34, 4}},
        {16383, {36, 6}},
        {16383, {38, 8}},
        {16383, {39, 2}},
        {16383, {41, 4}},
        {16383, {43, 6}},
        {16383, {45, 8}},
        {16383, {46, 2}},
        {16383, {48, 4}},
        {16383, {50, 6}},
        {16383, {52, 8}},
        {16383, {53, 2}},
        {32767, {55, 3}},
        {32767, {57, 4}},
        {32767, {59, 5}},
        {32767, {61, 6}},
        {32767, {63, 7}},
        {32767, {65, 8}},
        {32767, {66, 1}},
        {32767, {68, 2}},
        {32767, {70, 3}},
        {32767, {72, 4}},
        {32767, {74, 5}},
        {32767, {76, 6}},
        {32767, {78, 7}},
        {32767, {80, 8}},
        {32767, {81, 1}},
        {32767, {83, 2}},
        {32767, {85, 3}},
        {32767, {87, 4}},
        {32767, {89, 5}},
        {32767, {91, 6}},
        {32767, {93, 7}},
        {32767, {95, 8}},
        {32767, {96, 1}},
        {32767, {98, 2}},
        {32767, {100, 3}},
        {32767, {102, 4}},
        {32767, {104, 5}},
        {32767, {106, 6}},
        {32767, {108, 7}},
        {32767, {110, 8}},
        {32767, {111, 1}},
        {32767, {113, 2}},
        {32767, {115, 3}},
        {32767, {117, 4}},
        {32767, {119, 5}},
        {32767, {121, 6}},
        {32767, {123, 7}},
        {32767, {125, 8}},
        {32767, {126, 1}},
        {32767, {128, 2}},
        {32767, {130, 3}},
        {32767, {132, 4}},
        {32767, {134, 5}},
        {32767, {136, 6}},
        {32767, {138, 7}},
        {32767, {140, 8}},
        {32767, {141, 1}},
        {65535, {143, 1}},
        {65535, {145, 1}},
        {65535, {147, 1}},
        {65535, {149, 1}},
        {65535, {151, 1}},
        {65535, {153, 1}},
        {65535, {155, 1}},
        {65535, {157, 1}},
        {65535, {159, 1}},
        {65535, {161, 1}},
        {65535, {163, 1}},
        {65535, {165, 1}},
        {65535, {167, 1}},
        {65535, {169, 1}},
        {65535, {171, 1}},
        {65535, {173, 1}},
        {65535, {175, 1}},
        {65535, {177, 1}},
        {65535, {179, 1}},
        {65535, {181, 1}},
        {65535, {183, 1}},
        {65535, {185, 1}},
        {65535, {187, 1}},
        {65535, {189, 1}},
        {65535, {191, 1}},
        {65535, {193, 1}},
        {65535, {195, 1}},
        {65535, {197, 1}},
        {131071, {200, 8}},
        {131071, {202, 7}},
        {131071, {204, 6}},
        {131071, {206, 5}},
        {131071, {208, 4}},
        {131071, {210, 3}},
        {131071, {212, 2}},
        {131071, {214, 1}},
        {131071, {217, 8}},
        {131071, {219, 7}},
        {131071, {221, 6}},
        {131071, {223, 5}},
        {131071, {225, 4}},
        {131071, {227, 3}},
        {131071, {229, 2}},
        {131071, {231, 1}},
        {131071, {234, 8}},
        {131071, {236, 7}},
        {131071, {238, 6}},
        {131071, {240, 5}},
        {131071, {242, 4}},
        {131071, {244, 3}},
        {131071, {246, 2}},
        {131071, {248, 1}},
        {131071, {251, 8}},
        {262143, {253, 6}},
        {262143, {255, 4}},
        {262143, {257, 2}},
        {262143, {260, 8}},
        {262143, {262, 6}},
        {262143, {264, 4}},
        {262143, {266, 2}},
        {262143, {269, 8}},
        {262143, {271, 6}},
        {262143, {273, 4}},
        {262143, {275, 2}},
        {262143, {278, 8}},
        {262143, {280, 6}},
        {262143, {282, 4}},
        {262143, {284, 2}},
        {262143, {287, 8}},
        {262143, {289, 6}},
        {524287, {291, 3}},
        {524287, {294, 8}},
        {524287, {296, 5}},
        {524287, {298, 2}},
        {524287, {301, 7}},
        {524287, {303, 4}},
        {524287, {305, 1}},
        {524287, {308, 6}},
        {524287, {310, 3}},
        {524287, {313, 8}},
        {524287, {315, 5}},
        {524287, {317, 2}},
        {524287, {320, 7}},
        {524287, {322, 4}},
        {524287, {324, 1}},
        {524287, {327, 6}},
        {524287, {329, 3}},
        {524287, {332, 8}},
        {524287, {334, 5}},
        {524287, {336, 2}},
        {1048575, {339, 6}},
        {1048575, {341, 2}},
        {1048575, {344, 6}},
        {1048575, {346, 2}},
        {1048575, {349, 6}},
        {1048575, {351, 2}},
        {1048575, {354, 6}},
        {1048575, {356, 2}},
        {1048575, {359, 6}},
        {1048575, {361, 2}},
        {1048575, {364, 6}},
        {1048575, {366, 2}},
        {1048575, {369, 6}},
        {1048575, {371, 2}},
        {1048575, {374, 6}},
        {1048575, {376, 2}},
        {1048575, {379, 6}},
        {1048575, {381, 2}},
        {1048575, {384, 6}},
        {1048575, {386, 2}},
        {1048575, {389, 6}},
        {1048575, {391, 2}},
        {1048575, {394, 6}},
        {1048575, {396, 2}},
        {1048575, {399, 6}},
        {1048575, {401, 2}},
        {2097151, {404, 5}},
        {2097151, {407, 8}},
        {2097151, {409, 3}},
        {2097151, {412, 6}},
        {2097151, {414, 1}},
        {2097151, {417, 4}},
        {2097151, {420, 7}},
        {2097151, {422, 2}},
        {2097151, {425, 5}},
        {2097151, {428, 8}},
        {2097151, {430, 3}},
        {2097151, {433, 6}},
        {4194303, {436, 8}},
        {4194303, {438, 2}},
        {4194303, {441, 4}},
        {4194303, {444, 6}},
        {4194303, {447, 8}},
        {4194303, {449, 2}},
        {4194303, {452, 4}},
        {4194303, {455, 6}},
        {8388607, {458, 7}},
        {8388607, {461, 8}},
        {8388607, {463, 1}},
        {8388607, {466, 2}},
        {8388607, {469, 3}},
        {8388607, {472, 4}},
        {8388607, {475, 5}},
        {8388607, {478, 6}},
        {8388607, {481, 7}},
        {8388607, {484, 8}},
        {16777215, {487, 8}},
        {16777215, {490, 8}},
        {16777215, {493, 8}},
        {67108863, {496, 6}}};

   public:
    static const constexpr uint8_t width = 8;
    static constexpr uint8_t convert(uint8_t c) {
        return c_map[c];
    }
    static constexpr uint8_t revert(uint8_t c) {
        return r_map[c];
    }
    static constexpr uint16_t size() {
        return sizeof(custom_alphabet);
    }
    template <class o_t>
    static void write_statics(o_t& out) {
        uint8_t w = 8;
        uint32_t size = sizeof(custom_alphabet);
        out.write(reinterpret_cast<char*>(&w), 1);
        out.write(reinterpret_cast<char*>(&size), 4);
        out.write(reinterpret_cast<const char*>(c_map), 256);
        out.write(reinterpret_cast<const char*>(r_map), 256);
        if constexpr (sizeof(dtype) == 4) {
            uint32_t s = 1896;
            out.write(reinterpret_cast<char*>(&s), 4);
            out.write(reinterpret_cast<const char*>(S_map), 1896);
        } else {
            uint32_t s = 3792;
            out.write(reinterpret_cast<char*>(&s), 4);
            out.write(reinterpret_cast<const char*>(L_map), 3792);
        }
    }
    template <class i_t>
    static uint32_t load_statics(i_t& in_file) {
        uint8_t w;  
        in_file.read(reinterpret_cast<char*>(&w), 1);
        uint32_t size;
        in_file.read(reinterpret_cast<char*>(&size), 4);
        uint8_t* buf = (uint8_t*)std::malloc(256);
        in_file.read(reinterpret_cast<char*>(buf), 256);
        in_file.read(reinterpret_cast<char*>(buf), 256);
        uint32_t s;
        in_file.read(reinterpret_cast<char*>(&s), 4);
        if constexpr (sizeof(dtype) == 4) {
            uint8_t* s_buf = (uint8_t*)std::malloc(s);
            in_file.read(reinterpret_cast<char*>(s_buf), s);
            std::free(s_buf);
        } else {
            uint8_t* l_buf = (uint8_t*)std::malloc(s);
            in_file.read(reinterpret_cast<char*>(l_buf), s);
            std::free(l_buf);
        }
        return s + 2 * 256 + sizeof(L*) + sizeof(S*) + 1;
    }

   private:
    uint8_t counts[(sizeof(dtype) == 8 ? 500 : 0) + (sizeof(dtype) == 4 ? 500 : 0)];
   public:
    custom_alphabet() : counts() {}

    custom_alphabet(const custom_alphabet& other) {
        std::memcpy(this, &other, sizeof(custom_alphabet));
    }

    custom_alphabet(custom_alphabet&& other) = delete;

    custom_alphabet& operator=(const custom_alphabet& other) {
        std::memcpy(this, &other, sizeof(custom_alphabet));
    }

    custom_alphabet& operator=(custom_alphabet&& other) = delete;

    void add (uint8_t c, dtype v) {
        dtype ov = p_sum(c);
        if constexpr (sizeof(dtype) == 8) {
            dtype d = be64toh(reinterpret_cast<dtype*>(counts + L_map[c].second.first)[0]);
            d &= ~(L_map[c].first << L_map[c].second.second);
            d = htobe64(d | ((v + ov) << L_map[c].second.second));
            reinterpret_cast<dtype*>(counts + L_map[c].second.first)[0] = d;
        } else {
            dtype d = be32toh(reinterpret_cast<dtype*>(counts + S_map[c].second.first)[0]);
            d &= ~(S_map[c].first << S_map[c].second.second);
            d = htobe32(d | ((v + ov) << S_map[c].second.second));
            reinterpret_cast<dtype*>(counts + S_map[c].second.first)[0] = d;
        }
    }

    void clear() {
        std::memset(this, 0, sizeof(custom_alphabet));
    }

    dtype p_sum(uint8_t c) const {
        if constexpr (sizeof(dtype) == 8) {
            dtype d = be64toh(reinterpret_cast<const dtype*>(counts + L_map[c].second.first)[0]);
            return (d >> L_map[c].second.second) & L_map[c].first;
        } else {
            dtype d = be32toh(reinterpret_cast<const dtype*>(counts + S_map[c].second.first)[0]);
            return (d >> S_map[c].second.second) & S_map[c].first;
        }
    }

    void print() const {
        for (uint16_t i = 0; i < 237; i++) {
            std::cerr << int(revert(i)) << ": " << p_sum(i) << std::endl;
        }
    }
};
} // namespace bbwt
