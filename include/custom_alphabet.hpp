#include <cstdint>
#include <utility>
#include <endian.h>

namespace bbwt {
template <class dtype>
class custom_alphabet {
   private:
    inline static const uint8_t c_map[] = {
          0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 108, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          139, 57, 98, 52, 11, 51, 48, 113, 81, 82, 78, 37, 115, 99, 116, 111,
          104, 109, 97, 84, 80, 88, 64, 69, 76, 101, 103, 58, 68, 107, 67, 105,
          35, 106, 90, 87, 71, 112, 77, 79, 89, 96, 66, 60, 72, 93, 83, 70,
          100, 53, 74, 95, 94, 65, 55, 75, 38, 61, 59, 126, 41, 125, 32, 62,
          33, 134, 117, 127, 128, 138, 122, 118, 130, 137, 63, 102, 129, 123, 135, 131,
          121, 73, 132, 133, 136, 124, 114, 120, 85, 119, 86, 91, 110, 92, 43, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          45, 0, 0, 1, 2, 0, 0, 3, 40, 0, 0, 4, 0, 0, 0, 0,
          0, 0, 42, 0, 16, 0, 0, 36, 0, 0, 0, 5, 0, 0, 21, 18,
          22, 6, 0, 0, 34, 0, 0, 14, 0, 20, 0, 0, 0, 0, 0, 7,
          0, 0, 0, 0, 0, 0, 12, 0, 8, 0, 0, 0, 47, 25, 9, 31,
          15, 49, 0, 0, 50, 27, 13, 0, 29, 44, 0, 23, 0, 39, 0, 0,
          24, 19, 26, 46, 0, 0, 56, 10, 28, 0, 17, 0, 54, 0, 0, 0};
    inline static const uint8_t r_map[] = {
        0, 163, 164, 167, 171, 187, 193, 207, 216, 222, 247, 36, 214, 230, 199, 224,
        180, 250, 191, 241, 201, 190, 192, 235, 240, 221, 242, 229, 248, 232, 9, 223,
        94, 96, 196, 64, 183, 43, 88, 237, 168, 92, 178, 126, 233, 160, 243, 220,
        38, 225, 228, 37, 35, 81, 252, 86, 246, 33, 59, 90, 75, 89, 95, 106,
        54, 85, 74, 62, 60, 55, 79, 68, 76, 113, 82, 87, 56, 70, 42, 71,
        52, 40, 41, 78, 51, 120, 122, 67, 53, 72, 66, 123, 125, 77, 84, 83,
        73, 50, 34, 45, 80, 57, 107, 58, 48, 63, 65, 61, 10, 49, 124, 47,
        69, 39, 118, 44, 46, 98, 103, 121, 119, 112, 102, 109, 117, 93, 91, 99,
        100, 108, 104, 111, 114, 115, 97, 110, 116, 105, 101, 32, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    typedef std::pair<uint64_t, std::pair<uint32_t, uint32_t>> L;
    typedef std::pair<uint32_t, std::pair<uint16_t, uint16_t>> S;

    inline static const L L_map[] = {
        {1, {0, 63}},
        {1, {0, 62}},
        {1, {0, 61}},
        {1, {0, 60}},
        {1, {0, 59}},
        {1, {0, 58}},
        {1, {0, 57}},
        {1, {0, 56}},
        {1, {0, 55}},
        {1, {0, 54}},
        {1, {0, 53}},
        {3, {0, 51}},
        {3, {0, 49}},
        {3, {0, 47}},
        {3, {0, 45}},
        {7, {0, 42}},
        {15, {0, 38}},
        {15, {0, 34}},
        {15, {0, 30}},
        {31, {0, 25}},
        {63, {0, 19}},
        {63, {0, 13}},
        {127, {0, 6}},
        {127, {1, 7}},
        {127, {2, 8}},
        {127, {2, 1}},
        {255, {3, 1}},
        {255, {4, 1}},
        {1023, {6, 7}},
        {1023, {7, 5}},
        {2047, {8, 2}},
        {2047, {10, 7}},
        {2047, {11, 4}},
        {2047, {12, 1}},
        {8191, {14, 4}},
        {8191, {16, 7}},
        {8191, {17, 2}},
        {8191, {19, 5}},
        {16383, {21, 7}},
        {16383, {22, 1}},
        {16383, {24, 3}},
        {16383, {26, 5}},
        {32767, {28, 6}},
        {32767, {30, 7}},
        {32767, {32, 8}},
        {32767, {33, 1}},
        {32767, {35, 2}},
        {65535, {37, 2}},
        {65535, {39, 2}},
        {65535, {41, 2}},
        {65535, {43, 2}},
        {65535, {45, 2}},
        {65535, {47, 2}},
        {131071, {49, 1}},
        {131071, {52, 8}},
        {131071, {54, 7}},
        {131071, {56, 6}},
        {131071, {58, 5}},
        {131071, {60, 4}},
        {131071, {62, 3}},
        {262143, {64, 1}},
        {262143, {67, 7}},
        {524287, {69, 4}},
        {524287, {71, 1}},
        {524287, {74, 6}},
        {524287, {76, 3}},
        {524287, {79, 8}},
        {524287, {81, 5}},
        {524287, {83, 2}},
        {524287, {86, 7}},
        {524287, {88, 4}},
        {524287, {90, 1}},
        {524287, {93, 6}},
        {524287, {95, 3}},
        {524287, {98, 8}},
        {524287, {100, 5}},
        {524287, {102, 2}},
        {1048575, {105, 6}},
        {1048575, {107, 2}},
        {1048575, {110, 6}},
        {1048575, {112, 2}},
        {1048575, {115, 6}},
        {1048575, {117, 2}},
        {1048575, {120, 6}},
        {1048575, {122, 2}},
        {1048575, {125, 6}},
        {1048575, {127, 2}},
        {1048575, {130, 6}},
        {1048575, {132, 2}},
        {1048575, {135, 6}},
        {1048575, {137, 2}},
        {1048575, {140, 6}},
        {1048575, {142, 2}},
        {1048575, {145, 6}},
        {2097151, {147, 1}},
        {2097151, {150, 4}},
        {2097151, {153, 7}},
        {2097151, {155, 2}},
        {2097151, {158, 5}},
        {2097151, {161, 8}},
        {2097151, {163, 3}},
        {2097151, {166, 6}},
        {2097151, {168, 1}},
        {2097151, {171, 4}},
        {2097151, {174, 7}},
        {2097151, {176, 2}},
        {4194303, {179, 4}},
        {4194303, {182, 6}},
        {4194303, {185, 8}},
        {4194303, {187, 2}},
        {4194303, {190, 4}},
        {4194303, {193, 6}},
        {4194303, {196, 8}},
        {4194303, {198, 2}},
        {4194303, {201, 4}},
        {4194303, {204, 6}},
        {8388607, {207, 7}},
        {8388607, {210, 8}},
        {8388607, {212, 1}},
        {8388607, {215, 2}},
        {8388607, {218, 3}},
        {8388607, {221, 4}},
        {8388607, {224, 5}},
        {8388607, {227, 6}},
        {8388607, {230, 7}},
        {16777215, {233, 7}},
        {16777215, {236, 7}},
        {16777215, {239, 7}},
        {16777215, {242, 7}},
        {16777215, {245, 7}},
        {16777215, {248, 7}},
        {33554431, {251, 6}},
        {33554431, {254, 5}},
        {33554431, {257, 4}},
        {33554431, {260, 3}},
        {33554431, {263, 2}},
        {33554431, {266, 1}},
        {33554431, {270, 8}},
        {67108863, {273, 6}},
        {67108863, {276, 4}}};

    inline static const S S_map[] = {
        {1, {0, 31}},
        {1, {0, 30}},
        {1, {0, 29}},
        {1, {0, 28}},
        {1, {0, 27}},
        {1, {0, 26}},
        {1, {0, 25}},
        {1, {0, 24}},
        {1, {0, 23}},
        {1, {0, 22}},
        {1, {0, 21}},
        {3, {0, 19}},
        {3, {0, 17}},
        {3, {0, 15}},
        {3, {0, 13}},
        {7, {0, 10}},
        {15, {0, 6}},
        {15, {0, 2}},
        {15, {1, 6}},
        {31, {1, 1}},
        {63, {2, 3}},
        {63, {3, 5}},
        {127, {4, 6}},
        {127, {5, 7}},
        {127, {6, 8}},
        {127, {6, 1}},
        {255, {7, 1}},
        {255, {8, 1}},
        {1023, {10, 7}},
        {1023, {11, 5}},
        {2047, {12, 2}},
        {2047, {14, 7}},
        {2047, {15, 4}},
        {2047, {16, 1}},
        {8191, {18, 4}},
        {8191, {20, 7}},
        {8191, {21, 2}},
        {8191, {23, 5}},
        {16383, {25, 7}},
        {16383, {26, 1}},
        {16383, {28, 3}},
        {16383, {30, 5}},
        {32767, {32, 6}},
        {32767, {34, 7}},
        {32767, {36, 8}},
        {32767, {37, 1}},
        {32767, {39, 2}},
        {65535, {41, 2}},
        {65535, {43, 2}},
        {65535, {45, 2}},
        {65535, {47, 2}},
        {65535, {49, 2}},
        {65535, {51, 2}},
        {131071, {53, 1}},
        {131071, {56, 8}},
        {131071, {58, 7}},
        {131071, {60, 6}},
        {131071, {62, 5}},
        {131071, {64, 4}},
        {131071, {66, 3}},
        {262143, {68, 1}},
        {262143, {71, 7}},
        {524287, {73, 4}},
        {524287, {75, 1}},
        {524287, {78, 6}},
        {524287, {80, 3}},
        {524287, {83, 8}},
        {524287, {85, 5}},
        {524287, {87, 2}},
        {524287, {90, 7}},
        {524287, {92, 4}},
        {524287, {94, 1}},
        {524287, {97, 6}},
        {524287, {99, 3}},
        {524287, {102, 8}},
        {524287, {104, 5}},
        {524287, {106, 2}},
        {1048575, {109, 6}},
        {1048575, {111, 2}},
        {1048575, {114, 6}},
        {1048575, {116, 2}},
        {1048575, {119, 6}},
        {1048575, {121, 2}},
        {1048575, {124, 6}},
        {1048575, {126, 2}},
        {1048575, {129, 6}},
        {1048575, {131, 2}},
        {1048575, {134, 6}},
        {1048575, {136, 2}},
        {1048575, {139, 6}},
        {1048575, {141, 2}},
        {1048575, {144, 6}},
        {1048575, {146, 2}},
        {1048575, {149, 6}},
        {2097151, {151, 1}},
        {2097151, {154, 4}},
        {2097151, {157, 7}},
        {2097151, {159, 2}},
        {2097151, {162, 5}},
        {2097151, {165, 8}},
        {2097151, {167, 3}},
        {2097151, {170, 6}},
        {2097151, {172, 1}},
        {2097151, {175, 4}},
        {2097151, {178, 7}},
        {2097151, {180, 2}},
        {4194303, {183, 4}},
        {4194303, {186, 6}},
        {4194303, {189, 8}},
        {4194303, {191, 2}},
        {4194303, {194, 4}},
        {4194303, {197, 6}},
        {4194303, {200, 8}},
        {4194303, {202, 2}},
        {4194303, {205, 4}},
        {4194303, {208, 6}},
        {8388607, {211, 7}},
        {8388607, {214, 8}},
        {8388607, {216, 1}},
        {8388607, {219, 2}},
        {8388607, {222, 3}},
        {8388607, {225, 4}},
        {8388607, {228, 5}},
        {8388607, {231, 6}},
        {8388607, {234, 7}},
        {16777215, {237, 7}},
        {16777215, {240, 7}},
        {16777215, {243, 7}},
        {16777215, {246, 7}},
        {16777215, {249, 7}},
        {16777215, {252, 7}},
        {33554431, {255, 6}},
        {33554431, {258, 5}},
        {33554431, {261, 4}},
        {33554431, {264, 3}},
        {33554431, {267, 2}},
        {33554431, {270, 1}},
        {33554431, {274, 7}},
        {67108863, {277, 5}},
        {67108863, {280, 3}}};

   public:
    static const constexpr uint8_t width = 8;
    static constexpr uint8_t convert(uint8_t c) {
        return c_map[c];
    }
    static constexpr uint8_t revert(uint8_t c) {
        return r_map[c];
    }
    static constexpr uint16_t size() {
        return sizeof(custom_alphabet);
    }
    template <class o_t>
    static void write_statics(o_t& out) {
        out.write(reinterpret_cast<const char*>(&width), 1);
        uint32_t size = sizeof(custom_alphabet);
        out.write(reinterpret_cast<char*>(&size), 4);
        out.write(reinterpret_cast<const char*>(c_map), 256);
        out.write(reinterpret_cast<const char*>(r_map), 256);
        if constexpr (sizeof(dtype) == 4) {
            uint32_t s = 1120;
            out.write(reinterpret_cast<char*>(&s), 4);
            out.write(reinterpret_cast<const char*>(S_map), 1120);
        } else {
            uint32_t s = 2240;
            out.write(reinterpret_cast<char*>(&s), 4);
            out.write(reinterpret_cast<const char*>(L_map), 2240);
        }
    }
    template <class i_t>
    static uint32_t load_statics(i_t& in_file) {
        uint8_t w;
        in_file.read(reinterpret_cast<char*>(&w), 1);
        uint32_t size;
        in_file.read(reinterpret_cast<char*>(&size), 4);
        uint8_t* buf = (uint8_t*)std::malloc(256);
        in_file.read(reinterpret_cast<char*>(buf), 256);
        in_file.read(reinterpret_cast<char*>(buf), 256);
        uint32_t s;
        in_file.read(reinterpret_cast<char*>(&s), 4);
        if constexpr (sizeof(dtype) == 4) {
            uint8_t* s_buf = (uint8_t*)std::malloc(s);
            in_file.read(reinterpret_cast<char*>(s_buf), s);
            std::free(s_buf);
        } else {
            uint8_t* l_buf = (uint8_t*)std::malloc(s);
            in_file.read(reinterpret_cast<char*>(l_buf), s);
            std::free(l_buf);
        }
        return s + 2 * 256 + sizeof(L*) + sizeof(S*) + 1;
    }

   private:
    uint8_t counts[(sizeof(dtype) == 8 ? 284 : 0) + (sizeof(dtype) == 4 ? 284 : 0)];
   public:
    custom_alphabet() : counts() {}

    custom_alphabet(const custom_alphabet& other) {
        std::memcpy(this, &other, sizeof(custom_alphabet));
    }

    custom_alphabet(custom_alphabet&& other) = delete;

    custom_alphabet& operator=(const custom_alphabet& other) {
        std::memcpy(this, &other, sizeof(custom_alphabet));
    }

    custom_alphabet& operator=(custom_alphabet&& other) = delete;

    void add (uint8_t c, dtype v) {
        dtype ov = p_sum(c);
        if constexpr (sizeof(dtype) == 8) {
            dtype d = be64toh(reinterpret_cast<dtype*>(counts + L_map[c].second.first)[0]);
            d &= ~(L_map[c].first << L_map[c].second.second);
            d = htobe64(d | ((v + ov) << L_map[c].second.second));
            reinterpret_cast<dtype*>(counts + L_map[c].second.first)[0] = d;
        } else {
            dtype d = be32toh(reinterpret_cast<dtype*>(counts + S_map[c].second.first)[0]);
            d &= ~(S_map[c].first << S_map[c].second.second);
            d = htobe32(d | ((v + ov) << S_map[c].second.second));
            reinterpret_cast<dtype*>(counts + S_map[c].second.first)[0] = d;
        }
    }

    void clear() {
        std::memset(this, 0, sizeof(custom_alphabet));
    }

    dtype p_sum(uint8_t c) const {
        if constexpr (sizeof(dtype) == 8) {
            assert(L_map[c].second.first <= 276);
            dtype d = be64toh(reinterpret_cast<const dtype*>(counts + L_map[c].second.first)[0]);
            return (d >> L_map[c].second.second) & L_map[c].first;
        } else {
            assert(L_map[c].second.first <= 280);
            dtype d = be32toh(reinterpret_cast<const dtype*>(counts + S_map[c].second.first)[0]);
            return (d >> S_map[c].second.second) & S_map[c].first;
        }
    }

    void print() const {
        for (uint16_t i = 0; i < 140; i++) {
            std::cerr << int(revert(i)) << ": " << p_sum(i) << std::endl;
        }
    }
};
} // namespace bbwt
